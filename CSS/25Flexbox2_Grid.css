.container{
    display: grid;
    grid-template-columns: repeat(3, 40px);/* 1fr 1fr 1fr | auto auto auto | repeat(3, 40px) */

    /* The repeat() function in CSS is a powerful tool primarily used within CSS Grid Layout to define repeating patterns of columns or rows. Keywords like auto-fill or auto-fit for dynamic repetition based on available space and track size. */

    grid-template-rows: repeat(3, 40px);

    /* grid: 24px / repeat(3, 40px);Syntax: <'grid-template'> | <'grid-template-rows'> / [ auto-flow && dense? ] <'grid-auto-columns'>? | [ auto-flow && dense? ] <'grid-auto-rows'>? / <'grid-template-columns'> */
    /* grid: repeat(3, 40px) / repeat(3, 40px) 20px 20px auto-flow dense auto auto / repeat(3, 40px) 20px 20px auto-flow dense auto auto / repeat(3, 40px) 20px 20px auto-flow dense auto auto ;  */


    /* gap:; The gap CSS property is a shorthand property for row-gap and column-gap specifying the gutters between grid rows and columns. */
    /* row-gap: 20px;The row-gap CSS property specifies the gutter between grid rows.
    column-gap: 20px; */
    gap: 20px 20px;

    /* grid-column: auto / span 2; Shorthand for 'grid-column-start' and 'grid-column-end'. Syntax: <'grid-column'> | <'grid-row'> | <'grid-area'> */
    /* grid-row: auto / span 2;Shorthand for 'grid-row-start' and 'grid-row-end'.Syntax: <grid-line> [ / <grid-line> ]?*/

    /* grid-area: auto / auto / auto / auto; Determine a grid item's size and location within the grid by contributing a line, a span, or nothing (automatic) to its grid placement. Shorthand for 'grid-row-start', 'grid-column-start', 'grid-row-end', and 'grid-column-end'. Syntax: <'grid-row'> / <'grid-column'> / <'grid-row-end'> / <'grid-column-end'> */

    /* grid-auto-flow: column;Controls how the auto-placement algorithm works, specifying exactly how auto-placed items get flowed into the grid.Syntax: [ row | column ] || dense; */
    /* grid-auto-columns: 40px;Specifies the size of implicitly created columns.
    grid-auto-rows: 40px;Specifies the size of implicitly created rows */

    /* grid-column-start: span;Determine a grid item's size and location within the grid by contributing a line, a span, or nothing (automatic) to its grid placement. */
    /* grid-column-end: span;Determine a grid item's size and location within the grid by contributing a line, a span, or nothing (automatic) to its grid placement. */
    /* grid-row-start: span;
    grid-row-end: span; */
    /* grid-template: auto / repeat(3, 40px);Shorthand for setting grid-template-columns, grid-template-rows, and grid-template-areas in a single declaration.Syntax: none | [ <'grid-template-rows'> / <'grid-template-columns'> ] | [ <line-names>? <string> <track-size>? <line-names>? ]+ [ / <explicit-track-list> ]? */
    
    /* grid-template-columns: max-content max-content max-content;
    grid-template-rows: repeat(3, 40px);
    grid-template-areas: 
    "a b c"
    "d e f"
    "g h i"; */
    justify-content: center;
    align-content: center;
    /* place-content: center center;The place-content CSS shorthand property sets both the align-content and justify-content properties./Syntax: <'align-content'> <'justify-content'> */
    /* place-items: center center;The CSS place-items shorthand property sets both the align-items and justify-items properties. The first value is the align-items property value, the second the justify-items one. If the second value is not present, the first value is also used for it.Syntax: <'align-items'> <'justify-items'>? */
    /* place-self: center center;The place-self CSS property is a shorthand property sets both the align-self and justify-self properties. The first value is the align-self property value, the second the justify-self one. If the second value is not present, the first value is also used for it.Syntax: <'align-self'> <'justify-self'>? */
    /* align-self:;Allows the default alignment along the cross axis to be overridden for individual flex items. Syntax : auto | flex-start | flex-end | center | baseline | stretch | first baseline | last baseline | start | end | left | right | flex-start | flex-end |  self-start | self-end  */
    /* justify-self:; Allows the default alignment along the cross axis to be overridden for individual flex items. Syntax : auto | flex-start | flex-end | center | baseline | stretch | first baseline | last baseline | start | end | left | right | flex-start | flex-end |  self-start | self-end | save |unsave */
    
}
.grid-item{
    padding: 10px;
    border: 1px solid #000;
    background-color: aqua;
}

.item1{
    grid-column: 1 / 3; /* grid-column: span 2;grid-column:1 / span 2; */
    grid-row: span 2;
    /* grid-area: 1 / 1 / 3 / 3; */
    /* grid-column-start: span 2;
    grid-column-end: span 2;
    grid-row-start: span 2;
    grid-row-end: span 2; */
}

.container2{
    display: grid;
    grid-template-areas: 'header header header header header' 'menu main main main sidebar' 'menu main main main sidebar' 'menu footer footer footer footer';
    /* grid-template-rows: 100px 1fr 100px;
    grid-template-columns: repeat(3, 1fr);
    gap: 10px; */
}
.header{
    grid-area: header;
}
.main{
    grid-area: main;
}
.sidebar{
    grid-area: sidebar;
}
.footer{
    grid-area: footer;
}
